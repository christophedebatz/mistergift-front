/*
 *
 * Deprecate
 *
 */

/*
 * Application version
 * @type String
 */

$app-version: '0.0.1' !default;

/*
 * Deprecation mode
 * - `disabled`: output all the code, even if deprecated
 * - `silent`: disable all warnings but don't output deprecated code
 * - `verbose`: show all warnings, even for code that is *about* to be deprecated
 * - `sensible` (default): output warnings when deprecated code is detected
 * - `fail`: prevent compilation when deprecated code is found
 * @type String
 */

$deprecate-mode: 'sensible' !default;

@function _d-to-number($value) {
    $result: 0;
    $digits: 0;
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

    @for $i from 1 through str-length($value) {
        $character: str-slice($value, $i, $i);

        @if ($digits == 0) {
            $result: $result * 10 + map-get($numbers, $character);
        } @else {
            $digits: $digits * 10;
            $result: $result + map-get($numbers, $character) / $digits;
        }
    }

    @return $result;
}

@function _d-version-major($version) {
    @return _d-to-number(str-slice($version, 0, str-index($version, '.') - 1));
}

@function _d-version-minor($version) {
    $minor-patch: str-slice($version, str-index($version, '.') + 1, str-length($version));
    @return _d-to-number(str-slice($minor-patch, 0, str-index($minor-patch, '.') - 1));
}

@function _d-version-patch($version) {
    $minor-patch: str-slice($version, str-index($version, '.') + 1, str-length($version));
    @return _d-to-number(str-slice($minor-patch, str-index($minor-patch, '.') + 1, str-length($minor-patch)));
}

@mixin deprecate($version, $message: null) {
    @if (type-of($version) != 'string') {
        @error 'The parameter passed to deprecate() must be a String. Good: deprecate(\'0.1.0\') / Bad: deprecate(0.1.0).';
    }

    @if ($deprecate-mode == 'disabled') {
        @content;
    } @else {
        @if not ($deprecate-mode == 'silent') {
            // Assume we found code that is (or is about to be) deprecated
            $deprecation-found: true;

            @if ($deprecate-mode == 'verbose') {
                @if (&) {
                    $parent: &;
                    @warn '#{$parent} will be deprecated in #{$version}. Current version: #{$app-version}.';
                } @else {
                    @warn 'Some code will be deprecated in #{$version}. Current version: #{$app-version}.';
                }
            }

            @if (_d-version-major($version) > _d-version-major($app-version)) {
                @content;
                $deprecation-found: false;
            } @else {
                @if (_d-version-major($version) == _d-version-major($app-version)) {
                    @if (_d-version-minor($version) > _d-version-minor($app-version)) {
                        @content;
                        $deprecation-found: false;
                    } @else {
                        @if (_d-version-minor($version) == _d-version-minor($app-version)) {
                            @if (_d-version-patch($version) > _d-version-patch($app-version)) {
                                @content;
                                $deprecation-found: false;
                            }
                        }
                    }
                }
            }

            @if ($deprecation-found) {
                $message: if($message, '\AREASON:  #{$message}', '');

                @if ($deprecate-mode == 'fail') {
                    @error 'Deprecated code was found. Remove it to continue.#{$message}';
                } @else {
                    @warn 'Deprecated code was found, it should be removed before its release.#{$message}';
                }
            }
        }
    }
}
